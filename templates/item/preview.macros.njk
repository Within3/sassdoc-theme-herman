{% import 'utility.macros.njk' as utility %}
{% import 'item/annotation.macros.njk' as annotation %}
{% import 'item/macros.njk' as show %}


{#
  Show Previews
  -------------
  Call the requested previews with the appropriate JSON data.
#}
{% macro show_previews(data, item) %}
  {% if data and item -%}
    {%- set args = item.font or item.colors or item.ratios or item.sizes -%}
    {%- set key = args.key or item.context.origName or item.context.name -%}
    {%- if key -%}
      {%- if item.font and data.fonts[key] %}
        {{ font_specimen(key, data.fonts[key], item.iframed) }}
      {% endif -%}

      {%- if item.colors and data.colors[key] %}
        {{ color_palette(data.colors[key]) }}
      {% endif -%}

      {%- if item.ratios and data.ratios[key] %}
        {{ ratios(data.ratios[key]) }}
      {% endif -%}

      {%- if item.sizes and data.sizes[key] %}
        {{ sizes(data.sizes[key], args) }}
      {%- endif -%}
    {%- endif -%}
  {%- endif %}
{% endmacro %}


{#
  Color Palette
  -------------
  Display color palettes based on JSON map output.
#}
{% macro color_palette(data) %}
  {% call show.item_section('color-palette', 'Color Previews') %}
    <div class="color-palette">
      {% for value, items in data|list|groupby('value') %}
        <div class="color-preview">
          <div class="color-swatch">
            <div class="transparency-grid"></div>
            <div class="color-overlay" style="background-color: {{ value }};"></div>
          </div>
          <div class="color-info">
            <strong class="color-name">
              {% for item in items %}
                <span class="color-name-option">{{ item.key }}{% if not loop.last %},&nbsp;{% endif %}</span>
              {% endfor %}
            </strong>
            {% set color = value|colors %}
            {% if color %}
              {% for format in ['hex', 'rgb', 'hsl'] %}
                {% if color[format] %}
                  <code class="color-value">{{ color[format] }}</code>
                {% endif %}
              {% endfor %}
            {% else %}
              <code class="color-value">{{ value }}</code>
            {% endif %}
          </div>
        </div>
      {% endfor %}
    </div>
  {% endcall %}
{% endmacro %}


{#
  Font Specimen
  -------------
  Display all font-family specimens,
  including multiple variants.

  @prop {String} name -
    Title for the font-family being displayed.
  @prop {Dict} data -
    All the available data on a given font,
    derived from the Sass JSON export.
  @prop {String} iframed -
    Rendered font specimen iframe content.
#}
{% macro font_specimen(name, data, iframed) %}
  {% set supplement = utility.link_if(data.name or name, data.source) %}
  {% set supplement = supplement + ' (' + name + ')' if (data.name and data.name != name) else supplement %}

  {% call show.item_section(
    slug='font-specimen',
    title='Font Preview',
    supplement=supplement
    ) %}

    {% if data.stack %}
      {% set name = data.name or name %}
      {% set family = [name, data.stack]|join(',') if not (name in data.stack) else data.stack %}
      {% set family = 'font-family: ' + font_names(family) + ';' %}
      {{ utility.code_block(language='css', content=family|safe) }}
    {% endif %}

    {% if iframed %}
      <iframe class="render-specimen" srcdoc="{{ iframed }}" width="100%" height="0"></iframe>
    {% endif %}
  {% endcall %}
{% endmacro %}



{#
  Specimen Variant
  ----------------
  Display a single specimen variant.

  @prop {Dict} variant -
    Parsed variant data (style, weight, formats, etc).
  @prop {Dict} data -
    Font-data from Sass map.
#}
{% macro specimen_variant(variant, data) %}
  {% set path = data[variant.variant] if data[variant.variant]|isString else '' %}
  {% set path = data[variant.variant].path or path %}
  {% set family = [variant.family, data.stack]|join(',') %}
  <div data-specimen-face="{{ variant.variant }}">
    <h4 data-specimen="face-name">
      {{ variant.variant }}

      {% if path %}
        (<code>{{ path }}</code>)
      {% endif %}
    </h4>
    <div data-specimen="sample" style="font-family: {{ font_names(family) }}; font-weight: {{ variant.weight }}; font-style: {{ variant.style }};">
      <div data-specimen="aa">Aa</div>
      <div data-specimen="lorem">{{ lorem('alpha') }}</div>
    </div>
  </div>
{% endmacro %}


{%- macro font_names(family) -%}
  {% set family = family|split(',') if family|isString else family %}
  {%- for name in family -%}
    {{ "'" + name + "'" if (' ' in name) else name }}
    {%- if not loop.last %}, {% endif -%}
  {%- endfor -%}
{%- endmacro -%}


{#
  Lorem
  -----
  Display Lorem Ipsum text for font specimens.

  @prop {'title' | 'body' | 'alpha'} length -
    They type of Lorem Ipsum to display:
    either title-length, paragraph-length,
    or a list of standard characters
    (uppercase, lowercase, numbers, and punctuation).
#}
{% macro lorem(length) %}
  {% if length == 'title' %}
    <span data-specimen-lorem="title">
      Pack my box with five dozen liquor&nbsp;jugs.
    </span>
  {% elif length == 'body' %}
    <span data-specimen-lorem="body">
      A wonderful serenity has taken possession of my entire soul, like these sweet mornings of spring which I enjoy with my whole heart. I am alone, and feel the charm of existence in this spot, which was created for the bliss of souls like mine. I am so happy, my dear friend, so absorbed in the exquisite sense of mere tranquil existence, that I neglect my talents. I should be incapable of drawing a single stroke at the present moment; and yet I feel that I never was a greater artist than&nbsp;now.
    </span>
  {% elif length == 'alpha' %}
    <span data-specimen-lorem="uppercase">
      ABCDEFGHIJKLMNOPQRSTUVWXYZ
    </span>
    <span data-specimen-lorem="lowercase">
      abcdefghijklmnopqrstuvwxyz
    </span>
    <span data-specimen-lorem="symbols">
      1234567890([{“‘,.;:?!$&*’”}])
    </span>
  {% endif %}
{% endmacro %}


{% macro ratios(data) %}
  {% for name, value in data %}
    {% call show.item_section(
      slug='ratio-preview',
      title='Ratio',
      supplement=name + ' (' + value + ')'
    ) %}
      {{ size_ruler(data, style='ratio') }}
    {% endcall %}
  {% endfor %}
{% endmacro %}


{% macro sizes(data, args) %}
  {% call show.item_section('size-preview', 'Size Previews') %}
    {% set style = args.style or 'text' %}

    {% if (style == 'ruler') or (style == 'ruler-large') %}
      {{ size_ruler(data, style=style) }}
    {% elif (style == 'text') %}
      {{ size_text(data) }}
    {% else %}
      {{ size_output(data) }}
    {% endif %}
  {% endcall %}
{% endmacro %}


{% macro size_ruler(data, style) %}
  {% set is_large = (style == 'ruler-large') %}
  {% set is_ratio = (style == 'ratio') %}

  <table class="sizes{% if is_large %} is-large{% endif %}">
    <tr class="is-hidden">
      <th class="size-name">{{ 'Step' if is_ratio else 'Name' }}</th>
      <th class="size-value">Value</th>
      <td class="size-viz"></td>
    </tr>

    {% if is_ratio %}
      {% set start = 5 %}
      {% set count = range(1, 7) if (value == 'linear') else range(-3, 4) %}
      {% for step in count %}
        {% set result = (1 * step) if (value == 'linear') else (1 * (value ** step)) %}
        {% set width = (start * step) if (value == 'linear') else (start * (value ** step)) %}
        {% set width = width + 'em' %}

        {{ size_ruler_row(
          name='—' if ( result == 1 ) else step,
          value='base' if ( result == 1 ) else result|round(2),
          width=width
          ) }}
      {% endfor %}
    {% else %}
      {% for value, items in data|list|groupby('value') %}
        {% set name = items|join(', ', 'key') %}
        {{ size_ruler_row(
          name=name,
          value=value,
          width=value
        ) }}
      {% endfor %}
    {% endif %}
  </table>
{% endmacro %}


{% macro size_ruler_row(name, value, width=none, text=none) %}
  <tr class="size{% if value == 'base' %} ratio-base{% endif %}">
    <td class="size-name">
      {{ name }}
    </td>
    <td class="size-value">
      <code>
        {{ value }}
      </code>
    </td>
    <td class="size-viz{% if text %} is-text{% endif %}">
      {% if width %}
        <div class="size-overflow">
          <span class="size-bar" style="width: {{ width }};">
            &nbsp;
          </span>
        </div>
      {% elif text %}
        <span class="size-text" style="font-size: {{ value }};">
          {{ lorem('title') }}
        </span>
      {% endif %}
    </td>
  </tr>
{% endmacro %}


{% macro size_text(data) %}
  <table class="sizes">
    <tr class="is-hidden">
      <th class="size-name">Name</th>
      <th class="size-value">Value</th>
      <td class="size-viz"></td>
    </tr>

    {% for value, items in data|list|groupby('value') %}
      {% set name = items|join(', ', 'key') %}
        {{ size_ruler_row(
          name=name,
          value=value,
          text=value
        ) }}
    {% endfor %}
  </table>
{% endmacro %}


{% macro size_output(data) %}
  <table class="sizes">
    <tr class="is-hidden">
      <th class="size-name">Name</th>
      <th class="size-value">Value</th>
      <td class="size-viz"></td>
    </tr>

    {% for value, items in data|list|groupby('value') %}
      {% set name = items|join(', ', 'key') %}
        {{ size_ruler_row(
          name=name,
          value=value
        ) }}
    {% endfor %}
  </table>
{% endmacro %}


{% macro icons(item) %}
  {% if item.icons and item.icons|length and item.iframed %}
    {% call show.item_section(
      slug='icon-preview',
      title='Icon Previews',
      supplement=item.iconsPath
    ) %}
      <iframe class="render-icons" srcdoc="{{ item.iframed }}" width="100%" height="0"></iframe>
    {% endcall %}
  {% endif %}
{% endmacro %}
